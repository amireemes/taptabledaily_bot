import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_polling
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import locale
from notion_utils import send_to_notion
from notion_client import Client


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
USER_IDS = list(map(int, os.getenv("USER_IDS", "").split(','))) or [
    524373106, 1224720716, 501421236, 897190202, 385608549, 501352218, 5006534774] 
ADMINS = [524373106, 501421236, 5006534774]  # Amir, Temir, Alemkhan
DEVELOPERS = {
    524373106: "Amir Yergaliyev",
    1224720716: "Damir Kushumbayev",
    501421236: "Temirlan Ismagulov",
    897190202: "Bekzhan Aktoreev",
    385608549: "Alemkhan Yergaliyev",
    5006534774: "Abdulla Jurayev", 
    501352218: "Daniyal Serik"
}
GROUP_CHAT_ID = -1002827950178



# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ReportStates(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler(event_loop=asyncio.get_event_loop())
incomplete_users = set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands=['report'])
async def start_report(message: types.Message):
    user_id = message.chat.id
    incomplete_users.add(user_id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É, —á—Ç–æ–±—ã —Ç—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª –º–Ω–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ üòé\n\n"
        "1. –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è? üî™\n\n"
        "(–û—Ç–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ ‚Üí –ó–∞–¥–∞—á–∞ FXX: —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–æ, —ç—Ç–æ.\n"
        "–ó–∞–¥–∞—á–∞ BKK: —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–æ, —ç—Ç–æ)"
    )
    await ReportStates.question1.set()

@dp.message_handler(state=ReportStates.question1)
async def q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer(
        "2. –ö–∞–∫–∏–µ –±—ã–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏? üëä\n\n"
        "(–ú–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –±—ã–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ frontend/backend, –±–∞–≥–∏ –∏ —Ç.–¥.)"
    )
    await ReportStates.question2.set()

@dp.message_handler(state=ReportStates.question2)
async def q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer(
        "3. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–≤—Ç—Ä–∞? üìÜ\n\n"
        "(–û–ø–∏—à–∏ –∑–∞–¥–∞—á–∏, code review –∏ —Ç.–ø.)"
    )
    await ReportStates.question3.set()

@dp.message_handler(state=ReportStates.question3)
async def q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer(
        "4. –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏? üìå\n\n"
        "(–õ—é–±—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è)"
    )
    await ReportStates.question4.set()


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    # fallback: –º–æ–∂–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –º–µ—Å—è—Ü –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
    MONTHS = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }

# –ú–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}


@dp.message_handler(state=ReportStates.question4)
async def q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    data = await state.get_data()

    today = datetime.now()
    formatted_date = f"{today.day} {MONTHS_RU[today.month]}"

    await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à—ë–ª –≤—Ä–µ–º—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è!\n–¢–≤–æ–π –≤–∫–ª–∞–¥ —Ü–µ–Ω–µ–Ω, —Ç—ã –∫—Ä—É—Ç–æ–π üòé")

    report_text = (
        f"üìã –¢–≤–æ–π –æ—Ç—á—ë—Ç –Ω–∞ {formatted_date}:\n\n"
        f"1Ô∏è‚É£ –ù–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞–ª:\n{data['q1']}\n\n"
        f"2Ô∏è‚É£ –°–ª–æ–∂–Ω–æ—Å—Ç–∏:\n{data['q2']}\n\n"
        f"3Ô∏è‚É£ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{data['q3']}\n\n"
        f"4Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{data['q4']}"
    )

    await message.answer(report_text)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    developer_name = DEVELOPERS.get(message.chat.id, f"User {message.chat.id}")

    report_core = (
        f"1Ô∏è‚É£ –ù–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞–ª:\n{data['q1']}\n\n"
        f"2Ô∏è‚É£ –°–ª–æ–∂–Ω–æ—Å—Ç–∏:\n{data['q2']}\n\n"
        f"3Ô∏è‚É£ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{data['q3']}\n\n"
        f"4Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{data['q4']}"
    )

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    # for admin_id in ADMINS:
    #     # if admin_id != message.chat.id:  # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    #         try:
    #             await bot.send_message(
    #                 admin_id,
    #                 f"üßë‚Äçüíª –û—Ç—á—ë—Ç –æ—Ç {developer_name}:\n\n{report_core}"
    #             )
    #         except Exception as e:
    #             logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    try:
        await bot.send_message(
            GROUP_CHAT_ID,
            f"üßë‚Äçüíª –û—Ç—á—ë—Ç –æ—Ç {developer_name} –∑–∞ {formatted_date}:\n\n{report_core}"
        )
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Notion:")
        print("ID:", message.chat.id)
        print("DATA:", data)
        print(f"TOKEN USED: {os.getenv('NOTION_TOKEN')}")


        await send_to_notion(message.chat.id, data)  

    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –≥—Ä—É–ø–ø—É: {e}")

# @dp.message_handler()
# async def catch_chat_id(message: types.Message):
#     print(f"Chat ID: {message.chat.id}")




# –ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def scheduled_send_daily_reports():
    for user_id in USER_IDS:
        incomplete_users.add(user_id)
        try:
            await bot.send_message(
    user_id,
    "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É, —á—Ç–æ–±—ã —Ç—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª –º–Ω–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ üòé\n\n"
    "1. –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è? üî™\n\n"
    "(–û—Ç–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ ‚Üí –ó–∞–¥–∞—á–∞ FXX: —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–æ, —ç—Ç–æ.\n"
    "–ó–∞–¥–∞—á–∞ BKK: —Å–¥–µ–ª–∞–Ω–æ —ç—Ç–æ, —ç—Ç–æ)"
)
            state = dp.current_state(user=user_id)
            await state.set_state(ReportStates.question1.state)
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def scheduled_send_reminders():
    for user_id in list(incomplete_users):
        try:
            await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç üôå")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(event_loop=asyncio.get_event_loop())  # –ø—Ä–∏–≤—è–∑–∫–∞ loop

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # –ê–ª–º–∞—Ç—ã 19:25 ‚Üí UTC 13:25

    scheduler.add_job(scheduled_send_daily_reports, trigger='cron', hour=18, minute=15, timezone='Asia/Almaty')
    scheduler.add_job(scheduled_send_reminders, trigger='cron', hour=19, minute=55, timezone='Asia/Almaty')

    scheduler.start()

    # –ú–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é:
    # await scheduled_send_daily_reports()
    # await scheduled_send_reminders()

    
    await dp.start_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    asyncio.run(main())
