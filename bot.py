import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_polling
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler



# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
USER_IDS = list(map(int, os.getenv("USER_IDS", "").split(','))) or [
    524373106, 897190202, 501421236, 385608549, 5006534774, 501352218] 


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ReportStates(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler(event_loop=asyncio.get_event_loop())
incomplete_users = set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands=['report'])
async def start_report(message: types.Message):
    user_id = message.chat.id
    incomplete_users.add(user_id)
    await message.answer("1Ô∏è‚É£ –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è?")
    await ReportStates.question1.set()

@dp.message_handler(state=ReportStates.question1)
async def q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer("2Ô∏è‚É£ –ö–∞–∫–∏–µ –±—ã–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏?")
    await ReportStates.question2.set()

@dp.message_handler(state=ReportStates.question2)
async def q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer("3Ô∏è‚É£ –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–≤—Ç—Ä–∞?")
    await ReportStates.question3.set()

@dp.message_handler(state=ReportStates.question3)
async def q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer("4Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")
    await ReportStates.question4.set()

@dp.message_handler(state=ReportStates.question4)
async def q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    data = await state.get_data()
    await message.answer(
        f"üìã –¢–≤–æ–π –æ—Ç—á—ë—Ç:\n"
        f"1Ô∏è‚É£ –ù–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞–ª: {data['q1']}\n"
        f"2Ô∏è‚É£ –°–ª–æ–∂–Ω–æ—Å—Ç–∏: {data['q2']}\n"
        f"3Ô∏è‚É£ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {data['q3']}\n"
        f"4Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['q4']}"
    )
    incomplete_users.discard(message.chat.id)
    await state.finish()


# –ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def scheduled_send_daily_reports():
    for user_id in USER_IDS:
        incomplete_users.add(user_id)
        try:
            await bot.send_message(user_id, "1Ô∏è‚É£ –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π —Ç—ã —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è?")
            state = dp.current_state(user=user_id)
            await state.set_state(ReportStates.question1.state)
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def scheduled_send_reminders():
    for user_id in list(incomplete_users):
        try:
            await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç üôå")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(event_loop=asyncio.get_event_loop())  # –ø—Ä–∏–≤—è–∑–∫–∞ loop

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # –ê–ª–º–∞—Ç—ã 19:25 ‚Üí UTC 13:25

    scheduler.add_job(scheduled_send_daily_reports, trigger='cron', hour=19, minute=48, timezone='Asia/Almaty')
    scheduler.add_job(scheduled_send_reminders, trigger='cron', hour=19, minute=55, timezone='Asia/Almaty')

    scheduler.start()

    # –ú–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é:
    # await scheduled_send_daily_reports()
    # await scheduled_send_reminders()

    
    await dp.start_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    asyncio.run(main())
